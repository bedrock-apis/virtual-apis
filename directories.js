import merge from 'deepmerge';
import fs from 'node:fs/promises';
import path from 'node:path';
import url from 'node:url';
import prettier from 'prettier';

// Usage
// node directories regenerate - Merges current and old directories state
// node directories regenerate clean - Saves current directories state

if (process.argv.includes('regenerate')) {
   setImmediate(async () => {
      try {
         const selfPath = url.fileURLToPath(import.meta.url);
         const sourceCode = (await fs.readFile(selfPath, 'utf-8')).replace(
            /^\/\/ CODE BELOW IS AUTOGENERATED[^]+/m,
            '// CODE BELOW IS AUTOGENERATED',
         );

         /** @type {[string, object, string, boolean?][]} */
         const sources = [
            ['DIST', DIST, 'dist'],
            ['SRC', SRC, 'src'],
            ['ROOT', ROOT, '.', true],
         ];

         const generatedCode = await Promise.all(
            sources.map(async ([constName, old, ...args]) => {
               const current = await objectFromDir(...args);
               const result = process.argv.includes('clean') ? current : merge(current, old);
               const stringified = JSON.stringify(result, null, 3);
               const code = `\r\nexport const ${constName} = ${stringified}\r\n`;
               const formatted = await prettier.format(code, {
                  parser: 'acorn',
                  ...(await prettier.resolveConfig(selfPath)),
               });

               return formatted;
            }),
         );

         await fs.writeFile(selfPath, `${sourceCode}\r\n\r\n${generatedCode.join('')}`);
      } catch (e) {
         console.log(`Unable to update ${path.parse(import.meta.filename).base}:`, e);
      }
   });
}

/** @param {string} dir */
export async function objectFromDir(dir, onlyFiles = false) {
   /** @type {Record<string, string | Record<string, unknown>>} */
   const object = {};
   for (const entry of await fs.readdir(dir, { withFileTypes: true })) {
      const fullpath = './' + path.join(entry.parentPath, entry.name).replaceAll('\\', '/');
      const { ext } = path.parse(entry.name);
      const name = entry.name.replaceAll('.', '_').replaceAll('-', '_');

      // Ignore upper case because its from modules generated by rolldown
      if (entry.isFile() && ['.js', '.ts', '.json'].includes(ext) && name.toLowerCase() === name) {
         object[name] = fullpath;
      } else if (entry.isDirectory() && !onlyFiles) {
         object[name] = await objectFromDir(fullpath);
      }
   }
   return object;
}

// CODE BELOW IS AUTOGENERATED

export const DIST = {
   all_js: './dist/all.js',
   core_js: './dist/core.js',
   hooks_js: './dist/hooks.js',
   index_js: './dist/index.js',
   inventory_js: './dist/inventory.js',
   loader_js: './dist/loader.js',
   modules_js: './dist/modules.js',
   package_builder_js: './dist/package-builder.js',
   plugins: {
      all_js: './dist/plugins/all.js',
      core_js: './dist/plugins/core.js',
      inventory_js: './dist/plugins/inventory.js',
      modules_js: './dist/plugins/modules.js',
   },
   src: {
      api_builder: {
         context: {
            class_definition_d_ts: './dist/src/api-builder/context/class-definition.d.ts',
            context_options_d_ts: './dist/src/api-builder/context/context-options.d.ts',
            context_d_ts: './dist/src/api-builder/context/context.d.ts',
            execution_context: {
               construction_d_ts: './dist/src/api-builder/context/execution-context/construction.d.ts',
               general_d_ts: './dist/src/api-builder/context/execution-context/general.d.ts',
               index_d_ts: './dist/src/api-builder/context/execution-context/index.d.ts',
               instance_d_ts: './dist/src/api-builder/context/execution-context/instance.d.ts',
            },
            execution_context_d_ts: './dist/src/api-builder/context/execution-context.d.ts',
            factory: {
               base_d_ts: './dist/src/api-builder/context/factory/base.d.ts',
               constructor_d_ts: './dist/src/api-builder/context/factory/constructor.d.ts',
               function_d_ts: './dist/src/api-builder/context/factory/function.d.ts',
               index_d_ts: './dist/src/api-builder/context/factory/index.d.ts',
               method_d_ts: './dist/src/api-builder/context/factory/method.d.ts',
               properties_d_ts: './dist/src/api-builder/context/factory/properties.d.ts',
            },
            index_d_ts: './dist/src/api-builder/context/index.d.ts',
         },
         diagnostics: {
            data_d_ts: './dist/src/api-builder/diagnostics/data.d.ts',
            diagnostics_d_ts: './dist/src/api-builder/diagnostics/diagnostics.d.ts',
            factory_d_ts: './dist/src/api-builder/diagnostics/factory.d.ts',
            index_d_ts: './dist/src/api-builder/diagnostics/index.d.ts',
            messages_d_ts: './dist/src/api-builder/diagnostics/messages.d.ts',
            panic_d_ts: './dist/src/api-builder/diagnostics/panic.d.ts',
            reports_d_ts: './dist/src/api-builder/diagnostics/reports.d.ts',
         },
         events_d_ts: './dist/src/api-builder/events.d.ts',
         index_d_ts: './dist/src/api-builder/index.d.ts',
         kernel_d_ts: './dist/src/api-builder/kernel.d.ts',
         plugin: {
            api_d_ts: './dist/src/api-builder/plugin/api.d.ts',
            get_module_versions_d_ts: './dist/src/api-builder/plugin/get-module-versions.d.ts',
            index_d_ts: './dist/src/api-builder/plugin/index.d.ts',
         },
         type_validators: {
            default_d_ts: './dist/src/api-builder/type-validators/default.d.ts',
            index_d_ts: './dist/src/api-builder/type-validators/index.d.ts',
            params_definition_d_ts: './dist/src/api-builder/type-validators/params-definition.d.ts',
            type_d_ts: './dist/src/api-builder/type-validators/type.d.ts',
            types: {
               array_d_ts: './dist/src/api-builder/type-validators/types/array.d.ts',
               boolean_d_ts: './dist/src/api-builder/type-validators/types/boolean.d.ts',
               class_d_ts: './dist/src/api-builder/type-validators/types/class.d.ts',
               dynamic_d_ts: './dist/src/api-builder/type-validators/types/dynamic.d.ts',
               function_d_ts: './dist/src/api-builder/type-validators/types/function.d.ts',
               interface_d_ts: './dist/src/api-builder/type-validators/types/interface.d.ts',
               map_d_ts: './dist/src/api-builder/type-validators/types/map.d.ts',
               number_d_ts: './dist/src/api-builder/type-validators/types/number.d.ts',
               optional_d_ts: './dist/src/api-builder/type-validators/types/optional.d.ts',
               promise_d_ts: './dist/src/api-builder/type-validators/types/promise.d.ts',
               string_d_ts: './dist/src/api-builder/type-validators/types/string.d.ts',
               tests_helper_d_ts: './dist/src/api-builder/type-validators/types/tests.helper.d.ts',
               variant_d_ts: './dist/src/api-builder/type-validators/types/variant.d.ts',
            },
         },
      },
      constants_d_ts: './dist/src/constants.d.ts',
      loader: {
         node: {
            hooks_d_ts: './dist/src/loader/node/hooks.d.ts',
            loader_d_ts: './dist/src/loader/node/loader.d.ts',
         },
         vitest_d_ts: './dist/src/loader/vitest.d.ts',
      },
   },
   vitest_js: './dist/vitest.js',
};
export const SRC = {
   api_builder: {
      context: {
         class_definition_ts: './src/api-builder/context/class-definition.ts',
         context_options_ts: './src/api-builder/context/context-options.ts',
         context_ts: './src/api-builder/context/context.ts',
         execution_context: {
            construction_ts: './src/api-builder/context/execution-context/construction.ts',
            general_ts: './src/api-builder/context/execution-context/general.ts',
            index_ts: './src/api-builder/context/execution-context/index.ts',
            instance_ts: './src/api-builder/context/execution-context/instance.ts',
         },
         execution_context_ts: './src/api-builder/context/execution-context.ts',
         factory: {
            _test_ts: './src/api-builder/context/factory/.test.ts',
            base_ts: './src/api-builder/context/factory/base.ts',
            constructor_ts: './src/api-builder/context/factory/constructor.ts',
            function_ts: './src/api-builder/context/factory/function.ts',
            index_ts: './src/api-builder/context/factory/index.ts',
            method_ts: './src/api-builder/context/factory/method.ts',
            properties_ts: './src/api-builder/context/factory/properties.ts',
         },
         index_ts: './src/api-builder/context/index.ts',
      },
      diagnostics: {
         data_ts: './src/api-builder/diagnostics/data.ts',
         diagnostics_test_ts: './src/api-builder/diagnostics/diagnostics.test.ts',
         diagnostics_ts: './src/api-builder/diagnostics/diagnostics.ts',
         factory_ts: './src/api-builder/diagnostics/factory.ts',
         index_ts: './src/api-builder/diagnostics/index.ts',
         messages_ts: './src/api-builder/diagnostics/messages.ts',
         panic_ts: './src/api-builder/diagnostics/panic.ts',
         reports_ts: './src/api-builder/diagnostics/reports.ts',
      },
      events_ts: './src/api-builder/events.ts',
      index_ts: './src/api-builder/index.ts',
      isolation: {
         index_ts: './src/api-builder/isolation/index.ts',
         kernel_arrays_ts: './src/api-builder/isolation/kernel.arrays.ts',
         kernel_iterators_test_ts: './src/api-builder/isolation/kernel.iterators.test.ts',
         kernel_iterators_ts: './src/api-builder/isolation/kernel.iterators.ts',
         kernel_test_ts: './src/api-builder/isolation/kernel.test.ts',
         kernel_ts: './src/api-builder/isolation/kernel.ts',
      },
      type_validators: {
         default_ts: './src/api-builder/type-validators/default.ts',
         index_ts: './src/api-builder/type-validators/index.ts',
         params_definition_test_ts: './src/api-builder/type-validators/params-definition.test.ts',
         params_definition_ts: './src/api-builder/type-validators/params-definition.ts',
         type_test_ts: './src/api-builder/type-validators/type.test.ts',
         type_ts: './src/api-builder/type-validators/type.ts',
         types: {
            array_test_ts: './src/api-builder/type-validators/types/array.test.ts',
            array_ts: './src/api-builder/type-validators/types/array.ts',
            boolean_test_ts: './src/api-builder/type-validators/types/boolean.test.ts',
            boolean_ts: './src/api-builder/type-validators/types/boolean.ts',
            class_ts: './src/api-builder/type-validators/types/class.ts',
            dynamic_test_ts: './src/api-builder/type-validators/types/dynamic.test.ts',
            dynamic_ts: './src/api-builder/type-validators/types/dynamic.ts',
            function_test_ts: './src/api-builder/type-validators/types/function.test.ts',
            function_ts: './src/api-builder/type-validators/types/function.ts',
            interface_test_ts: './src/api-builder/type-validators/types/interface.test.ts',
            interface_ts: './src/api-builder/type-validators/types/interface.ts',
            map_test_ts: './src/api-builder/type-validators/types/map.test.ts',
            map_ts: './src/api-builder/type-validators/types/map.ts',
            number_test_ts: './src/api-builder/type-validators/types/number.test.ts',
            number_ts: './src/api-builder/type-validators/types/number.ts',
            optional_test_ts: './src/api-builder/type-validators/types/optional.test.ts',
            optional_ts: './src/api-builder/type-validators/types/optional.ts',
            promise_test_ts: './src/api-builder/type-validators/types/promise.test.ts',
            promise_ts: './src/api-builder/type-validators/types/promise.ts',
            string_test_ts: './src/api-builder/type-validators/types/string.test.ts',
            string_ts: './src/api-builder/type-validators/types/string.ts',
            tests_helper_ts: './src/api-builder/type-validators/types/tests.helper.ts',
            variant_test_ts: './src/api-builder/type-validators/types/variant.test.ts',
            variant_ts: './src/api-builder/type-validators/types/variant.ts',
         },
      },
   },
   constants_ts: './src/constants.ts',
   directories_ts: './src/directories.ts',
   helper_types_d_ts: './src/helper-types.d.ts',
   loader: {
      node: {
         hooks_ts: './src/loader/node/hooks.ts',
         loader_ts: './src/loader/node/loader.ts',
      },
      vitest_ts: './src/loader/vitest.ts',
   },
   package_builder: {
      codegen: {
         base_ts: './src/package-builder/codegen/base.ts',
         general_ts: './src/package-builder/codegen/general.ts',
         helpers_ts: './src/package-builder/codegen/helpers.ts',
         imports_ts: './src/package-builder/codegen/imports.ts',
         index_ts: './src/package-builder/codegen/index.ts',
      },
      dependency_resolver_test_ts: './src/package-builder/dependency-resolver.test.ts',
      dependency_resolver_ts: './src/package-builder/dependency-resolver.ts',
      helper_ts: './src/package-builder/helper.ts',
      index_ts: './src/package-builder/index.ts',
      metadata_provider: {
         general_ts: './src/package-builder/metadata-provider/general.ts',
         index_ts: './src/package-builder/metadata-provider/index.ts',
         online_ts: './src/package-builder/metadata-provider/online.ts',
         system_io_ts: './src/package-builder/metadata-provider/system-io.ts',
      },
      printer_ts: './src/package-builder/printer.ts',
      virtual_apis: {
         constants_ts: './src/package-builder/virtual-apis/constants.ts',
         engine_ts: './src/package-builder/virtual-apis/engine.ts',
         helper_ts: './src/package-builder/virtual-apis/helper.ts',
         index_ts: './src/package-builder/virtual-apis/index.ts',
         module_ts: './src/package-builder/virtual-apis/module.ts',
      },
   },
   plugin: {
      api_ts: './src/plugin/api.ts',
      get_module_versions_ts: './src/plugin/get-module-versions.ts',
      index_ts: './src/plugin/index.ts',
   },
   plugins: {
      all_ts: './src/plugins/all.ts',
      core_ts: './src/plugins/core.ts',
      inventory_ts: './src/plugins/inventory.ts',
      modules_ts: './src/plugins/modules.ts',
   },
   script_module_metadata_d_ts: './src/script-module-metadata.d.ts',
};
export const ROOT = {
   directories_js: './directories.js',
   eslint_plugin_d_ts: './eslint-plugin.d.ts',
   eslint_plugin_js: './eslint-plugin.js',
   eslint_config_js: './eslint.config.js',
   package_json: './package.json',
   rolldown_config_js: './rolldown.config.js',
   tsconfig_build_json: './tsconfig.build.json',
   tsconfig_json: './tsconfig.json',
   vitest_config_ts: './vitest.config.ts',
};
